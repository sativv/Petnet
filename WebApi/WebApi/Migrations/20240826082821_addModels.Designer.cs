// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Data;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240826082821_addModels")]
    partial class addModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuisnessContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivateSeller")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("OrganizationName")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationNumber")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Postcode")
                        .HasColumnType("int");

                    b.Property<string>("QuizResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "412a70d5-59f0-4638-8733-321246ad1bc0",
                            Email = "user1@example.com",
                            EmailConfirmed = false,
                            IsPrivateSeller = true,
                            IsVerified = true,
                            LockoutEnabled = false,
                            OrganizationName = 0,
                            OrganizationNumber = 0,
                            PhoneNumberConfirmed = false,
                            Postcode = 0,
                            SecurityStamp = "37722e1b-ead4-4754-bb4c-145781c9c3c1",
                            TwoFactorEnabled = false,
                            UserName = "user1@example.com"
                        },
                        new
                        {
                            Id = "user2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20b02e04-4223-4807-ac07-d7d498342be4",
                            Email = "user2@example.com",
                            EmailConfirmed = false,
                            IsPrivateSeller = false,
                            IsVerified = false,
                            LockoutEnabled = false,
                            OrganizationName = 0,
                            OrganizationNumber = 0,
                            PhoneNumberConfirmed = false,
                            Postcode = 0,
                            SecurityStamp = "0290a5e5-7cb4-447f-826f-940c954d3c27",
                            TwoFactorEnabled = false,
                            UserName = "user2@example.com"
                        });
                });

            modelBuilder.Entity("WebApi.Models.FileModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("File");
                });

            modelBuilder.Entity("WebApi.Models.InterestModel", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = "user1",
                            PostId = 1
                        },
                        new
                        {
                            ApplicationUserId = "user2",
                            PostId = 2
                        });
                });

            modelBuilder.Entity("WebApi.Models.OptionModel", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionId"));

                    b.Property<string>("Animal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");

                    b.HasData(
                        new
                        {
                            OptionId = 1,
                            Animal = "Hund",
                            Option = "Jag älskar att vara ute och vara aktiv",
                            QuestionId = 1
                        },
                        new
                        {
                            OptionId = 2,
                            Animal = "Katt",
                            Option = "Ligga i soffan och mysa med en bra film",
                            QuestionId = 1
                        },
                        new
                        {
                            OptionId = 3,
                            Animal = "Kanin",
                            Option = "Läsa en bok eller pyssla i trädgården",
                            QuestionId = 1
                        },
                        new
                        {
                            OptionId = 4,
                            Animal = "Fågel",
                            Option = "Organisera och dekorera hemmet",
                            QuestionId = 1
                        },
                        new
                        {
                            OptionId = 5,
                            Animal = "Akvarium",
                            Option = "Njuta av ett lugnt och stilla hem",
                            QuestionId = 1
                        },
                        new
                        {
                            OptionId = 6,
                            Animal = "Reptil",
                            Option = "Upptäcka nya intressen och hobbyer",
                            QuestionId = 1
                        },
                        new
                        {
                            OptionId = 7,
                            Animal = "Hund",
                            Option = "Ute i naturen, kanske i en park eller skog",
                            QuestionId = 2
                        },
                        new
                        {
                            OptionId = 8,
                            Animal = "Katt",
                            Option = "Inomhus, där jag kan ta det lugnt",
                            QuestionId = 2
                        },
                        new
                        {
                            OptionId = 9,
                            Animal = "Kanin",
                            Option = "Ett tyst och stilla rum",
                            QuestionId = 2
                        },
                        new
                        {
                            OptionId = 10,
                            Animal = "Fågel",
                            Option = "Ett hem fyllt med ljud och färg",
                            QuestionId = 2
                        },
                        new
                        {
                            OptionId = 11,
                            Animal = "Akvarium",
                            Option = "Ett hem som känns som ett akvarium, lugnt och fridfullt",
                            QuestionId = 2
                        },
                        new
                        {
                            OptionId = 12,
                            Animal = "Reptil",
                            Option = "I en miljö som är lite annorlunda och exotisk",
                            QuestionId = 2
                        },
                        new
                        {
                            OptionId = 13,
                            Animal = "Hund",
                            Option = "Jag gillar att spendera mycket tid utomhus och vara aktiv",
                            QuestionId = 3
                        },
                        new
                        {
                            OptionId = 14,
                            Animal = "Katt",
                            Option = "Jag vill ha sällskap men utan att behöva vara aktiv hela tiden",
                            QuestionId = 3
                        },
                        new
                        {
                            OptionId = 15,
                            Animal = "Kanin",
                            Option = "Jag vill ha ett djur som kräver lite mindre tid och uppmärksamhet",
                            QuestionId = 3
                        },
                        new
                        {
                            OptionId = 16,
                            Animal = "Fågel",
                            Option = "Jag gillar att pyssla och sköta om ett utrymme i mitt hem",
                            QuestionId = 3
                        },
                        new
                        {
                            OptionId = 17,
                            Animal = "Akvarium",
                            Option = "Jag vill ha något som är nästan självständigt",
                            QuestionId = 3
                        },
                        new
                        {
                            OptionId = 18,
                            Animal = "Reptil",
                            Option = "Jag gillar att skapa och underhålla en unik miljö",
                            QuestionId = 3
                        },
                        new
                        {
                            OptionId = 19,
                            Animal = "Hund",
                            Option = "Sport och träning",
                            QuestionId = 4
                        },
                        new
                        {
                            OptionId = 20,
                            Animal = "Katt",
                            Option = "Läsa eller titta på film",
                            QuestionId = 4
                        },
                        new
                        {
                            OptionId = 21,
                            Animal = "Kanin",
                            Option = "Pyssla eller hantverka",
                            QuestionId = 4
                        },
                        new
                        {
                            OptionId = 22,
                            Animal = "Fågel",
                            Option = "Dekorera och designa",
                            QuestionId = 4
                        },
                        new
                        {
                            OptionId = 23,
                            Animal = "Akvarium",
                            Option = "Meditation eller stilla reflektion",
                            QuestionId = 4
                        },
                        new
                        {
                            OptionId = 24,
                            Animal = "Reptil",
                            Option = "Experimentera och lära mig nya saker",
                            QuestionId = 4
                        },
                        new
                        {
                            OptionId = 25,
                            Animal = "Hund",
                            Option = "Jag går ut och rör på mig för att slappna av",
                            QuestionId = 5
                        },
                        new
                        {
                            OptionId = 26,
                            Animal = "Katt",
                            Option = "Jag myser gärna med något varmt och mjukt",
                            QuestionId = 5
                        },
                        new
                        {
                            OptionId = 27,
                            Animal = "Kanin",
                            Option = "Jag finner lugn i att pyssla eller göra något kreativt",
                            QuestionId = 5
                        },
                        new
                        {
                            OptionId = 28,
                            Animal = "Fågel",
                            Option = "Jag städar och organiserar för att rensa tankarna",
                            QuestionId = 5
                        },
                        new
                        {
                            OptionId = 29,
                            Animal = "Akvarium",
                            Option = "Jag tittar på något som ger mig frid, som fiskar som simmar",
                            QuestionId = 5
                        },
                        new
                        {
                            OptionId = 30,
                            Animal = "Reptil",
                            Option = "Jag utforskar något nytt och spännande för att distrahera mig",
                            QuestionId = 5
                        },
                        new
                        {
                            OptionId = 31,
                            Animal = "Hund",
                            Option = "Jag vill ha en kompis att spendera mycket tid med",
                            QuestionId = 6
                        },
                        new
                        {
                            OptionId = 32,
                            Animal = "Katt",
                            Option = "Jag vill ha ett djur som är självständigt men ändå socialt",
                            QuestionId = 6
                        },
                        new
                        {
                            OptionId = 33,
                            Animal = "Kanin",
                            Option = "Jag gillar små och lugna djur som inte kräver så mycket",
                            QuestionId = 6
                        },
                        new
                        {
                            OptionId = 34,
                            Animal = "Fågel",
                            Option = "Jag gillar att ta hand om och underhålla ett vackert utrymme",
                            QuestionId = 6
                        },
                        new
                        {
                            OptionId = 35,
                            Animal = "Akvarium",
                            Option = "Jag vill ha något som är lätt att sköta",
                            QuestionId = 6
                        },
                        new
                        {
                            OptionId = 36,
                            Animal = "Reptil",
                            Option = "Jag vill ha något ovanligt och lärorikt att ta hand om",
                            QuestionId = 6
                        },
                        new
                        {
                            OptionId = 37,
                            Animal = "Hund",
                            Option = "Jag är flexibel och gillar att anpassa mig",
                            QuestionId = 7
                        },
                        new
                        {
                            OptionId = 38,
                            Animal = "Katt",
                            Option = "Jag tycker om ett hem där allt har sin plats men är inte överdrivet noggrann",
                            QuestionId = 7
                        },
                        new
                        {
                            OptionId = 39,
                            Animal = "Kanin",
                            Option = "Jag uppskattar ordning men med en touch av personlighet",
                            QuestionId = 7
                        },
                        new
                        {
                            OptionId = 40,
                            Animal = "Fågel",
                            Option = "Jag älskar att ha ett perfekt organiserat och dekorerat hem",
                            QuestionId = 7
                        },
                        new
                        {
                            OptionId = 41,
                            Animal = "Akvarium",
                            Option = "Jag föredrar ett minimalistiskt och lugnt hem",
                            QuestionId = 7
                        },
                        new
                        {
                            OptionId = 42,
                            Animal = "Reptil",
                            Option = "Jag gillar att ha specifika utrymmen som är välplanerade",
                            QuestionId = 7
                        },
                        new
                        {
                            OptionId = 43,
                            Animal = "Hund",
                            Option = "Jag är mycket social och älskar att vara med andra",
                            QuestionId = 8
                        },
                        new
                        {
                            OptionId = 44,
                            Animal = "Katt",
                            Option = "Jag är social men uppskattar också min egen tid",
                            QuestionId = 8
                        },
                        new
                        {
                            OptionId = 45,
                            Animal = "Kanin",
                            Option = "Jag gillar att vara ensam men också att ha ett lugnt sällskap ibland",
                            QuestionId = 8
                        },
                        new
                        {
                            OptionId = 46,
                            Animal = "Fågel",
                            Option = "Jag tycker om att prata och interagera med andra men på mitt eget sätt",
                            QuestionId = 8
                        },
                        new
                        {
                            OptionId = 47,
                            Animal = "Akvarium",
                            Option = "Jag trivs bäst i min egen värld, men kan njuta av att titta på andra",
                            QuestionId = 8
                        },
                        new
                        {
                            OptionId = 48,
                            Animal = "Reptil",
                            Option = "Jag är mer intresserad av att observera än att delta",
                            QuestionId = 8
                        },
                        new
                        {
                            OptionId = 49,
                            Animal = "Hund",
                            Option = "Jag gillar att motionera och vara aktiv varje dag",
                            QuestionId = 9
                        },
                        new
                        {
                            OptionId = 50,
                            Animal = "Katt",
                            Option = "Jag gillar att röra mig men föredrar mer avslappnade aktiviteter",
                            QuestionId = 9
                        },
                        new
                        {
                            OptionId = 51,
                            Animal = "Kanin",
                            Option = "Jag föredrar aktiviteter som är lugna och mindre intensiva",
                            QuestionId = 9
                        },
                        new
                        {
                            OptionId = 52,
                            Animal = "Fågel",
                            Option = "Jag tycker om att ha rutiner men behöver inte mycket fysisk aktivitet",
                            QuestionId = 9
                        },
                        new
                        {
                            OptionId = 53,
                            Animal = "Akvarium",
                            Option = "Jag tycker om att sitta still och observera",
                            QuestionId = 9
                        },
                        new
                        {
                            OptionId = 54,
                            Animal = "Reptil",
                            Option = "Jag föredrar att utforska saker i min egen takt",
                            QuestionId = 9
                        },
                        new
                        {
                            OptionId = 55,
                            Animal = "Hund",
                            Option = "Rutiner är mycket viktiga för mig",
                            QuestionId = 10
                        },
                        new
                        {
                            OptionId = 56,
                            Animal = "Katt",
                            Option = "Jag gillar rutiner men kan vara flexibel när det behövs",
                            QuestionId = 10
                        },
                        new
                        {
                            OptionId = 57,
                            Animal = "Kanin",
                            Option = "Jag uppskattar rutiner men behöver också utrymme för frihet",
                            QuestionId = 10
                        },
                        new
                        {
                            OptionId = 58,
                            Animal = "Fågel",
                            Option = "Jag har vissa rutiner men är inte beroende av dem",
                            QuestionId = 10
                        },
                        new
                        {
                            OptionId = 59,
                            Animal = "Akvarium",
                            Option = "Rutiner är viktiga för mig men jag följer dem på mitt eget sätt",
                            QuestionId = 10
                        },
                        new
                        {
                            OptionId = 60,
                            Animal = "Reptil",
                            Option = "Jag föredrar att vara flexibel och följa dagsformen",
                            QuestionId = 10
                        },
                        new
                        {
                            OptionId = 61,
                            Animal = "Hund",
                            Option = "Jag föredrar ett sällskap som är lika aktivt som jag",
                            QuestionId = 11
                        },
                        new
                        {
                            OptionId = 62,
                            Animal = "Katt",
                            Option = "Jag gillar sällskap men vill också ha tid för mig själv",
                            QuestionId = 11
                        },
                        new
                        {
                            OptionId = 63,
                            Animal = "Kanin",
                            Option = "Jag uppskattar ett lugnt och avslappnat sällskap",
                            QuestionId = 11
                        },
                        new
                        {
                            OptionId = 64,
                            Animal = "Fågel",
                            Option = "Jag gillar ett sällskap som är pratsamt och uttrycksfullt",
                            QuestionId = 11
                        },
                        new
                        {
                            OptionId = 65,
                            Animal = "Akvarium",
                            Option = "Jag föredrar ett sällskap som är stillsamt och rogivande",
                            QuestionId = 11
                        },
                        new
                        {
                            OptionId = 66,
                            Animal = "Reptil",
                            Option = "Jag vill ha ett sällskap som är unikt och intressant",
                            QuestionId = 11
                        },
                        new
                        {
                            OptionId = 67,
                            Animal = "Hund",
                            Option = "Jag är noggrann med städning och gillar att ha det rent och snyggt",
                            QuestionId = 12
                        },
                        new
                        {
                            OptionId = 68,
                            Animal = "Katt",
                            Option = "Jag gillar att ha det rent men är inte överdrivet noggrann",
                            QuestionId = 12
                        },
                        new
                        {
                            OptionId = 69,
                            Animal = "Kanin",
                            Option = "Jag uppskattar ett rent hem men tycker inte att det behöver vara perfekt",
                            QuestionId = 12
                        },
                        new
                        {
                            OptionId = 70,
                            Animal = "Fågel",
                            Option = "Jag tycker om att ha ett vackert och prydligt hem",
                            QuestionId = 12
                        },
                        new
                        {
                            OptionId = 71,
                            Animal = "Akvarium",
                            Option = "Jag gillar att ha det rent och enkelt",
                            QuestionId = 12
                        },
                        new
                        {
                            OptionId = 72,
                            Animal = "Reptil",
                            Option = "Jag är mer intresserad av att ha ett intressant och organiserat utrymme",
                            QuestionId = 12
                        },
                        new
                        {
                            OptionId = 73,
                            Animal = "Hund",
                            Option = "Jag trivs bäst i ett hem med liv och rörelse",
                            QuestionId = 13
                        },
                        new
                        {
                            OptionId = 74,
                            Animal = "Katt",
                            Option = "Jag tycker om att ha det lugnt men kan stå ut med lite ljud",
                            QuestionId = 13
                        },
                        new
                        {
                            OptionId = 75,
                            Animal = "Kanin",
                            Option = "Jag föredrar ett tyst och stilla hem",
                            QuestionId = 13
                        },
                        new
                        {
                            OptionId = 76,
                            Animal = "Fågel",
                            Option = "Jag gillar att höra ljud från naturen, som fågelsång",
                            QuestionId = 13
                        },
                        new
                        {
                            OptionId = 77,
                            Animal = "Akvarium",
                            Option = "Jag föredrar en lugn och rogivande atmosfär",
                            QuestionId = 13
                        },
                        new
                        {
                            OptionId = 78,
                            Animal = "Reptil",
                            Option = "Jag gillar ett hem som är stilla men med lite variation",
                            QuestionId = 13
                        },
                        new
                        {
                            OptionId = 79,
                            Animal = "Hund",
                            Option = "Jag tar gärna på mig ansvar och trivs med det",
                            QuestionId = 14
                        },
                        new
                        {
                            OptionId = 80,
                            Animal = "Katt",
                            Option = "Jag gillar att ha ansvar men behöver också tid för mig själv",
                            QuestionId = 14
                        },
                        new
                        {
                            OptionId = 81,
                            Animal = "Kanin",
                            Option = "Jag föredrar att ha ett ansvar som inte är för tungt",
                            QuestionId = 14
                        },
                        new
                        {
                            OptionId = 82,
                            Animal = "Fågel",
                            Option = "Jag gillar att ha ansvar för att ta hand om något vackert",
                            QuestionId = 14
                        },
                        new
                        {
                            OptionId = 83,
                            Animal = "Akvarium",
                            Option = "Jag gillar att ha ansvar men på ett sätt som är enkelt och lugnt",
                            QuestionId = 14
                        },
                        new
                        {
                            OptionId = 84,
                            Animal = "Reptil",
                            Option = "Jag tar gärna på mig ansvar för något unikt och spännande",
                            QuestionId = 14
                        },
                        new
                        {
                            OptionId = 85,
                            Animal = "Hund",
                            Option = "Jag älskar att ha besök och är en utmärkt värd",
                            QuestionId = 15
                        },
                        new
                        {
                            OptionId = 86,
                            Animal = "Katt",
                            Option = "Jag gillar att ha besök men också min egen tid",
                            QuestionId = 15
                        },
                        new
                        {
                            OptionId = 87,
                            Animal = "Kanin",
                            Option = "Jag föredrar mindre sällskap och lugna besök",
                            QuestionId = 15
                        },
                        new
                        {
                            OptionId = 88,
                            Animal = "Fågel",
                            Option = "Jag gillar att dekorera och göra hemmet inbjudande för besökare",
                            QuestionId = 15
                        },
                        new
                        {
                            OptionId = 89,
                            Animal = "Akvarium",
                            Option = "Jag trivs bäst när jag kan ha mitt eget utrymme, även när jag har besök",
                            QuestionId = 15
                        },
                        new
                        {
                            OptionId = 90,
                            Animal = "Reptil",
                            Option = "Jag gillar att ha besök men vill inte att det blir för ofta",
                            QuestionId = 15
                        });
                });

            modelBuilder.Entity("WebApi.Models.PostModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AnimalBreed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnimalType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("EarliestDelivery")
                        .HasColumnType("date");

                    b.Property<bool>("IsAdoptionReady")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 2,
                            AnimalBreed = "Labrador",
                            AnimalType = "Dog",
                            ApplicationUserId = "user1",
                            Description = "Description for post 1",
                            EarliestDelivery = new DateOnly(2024, 9, 1),
                            IsAdoptionReady = true,
                            Title = "Post 1"
                        },
                        new
                        {
                            Id = 2,
                            Age = 1,
                            AnimalBreed = "Siamese",
                            AnimalType = "Cat",
                            ApplicationUserId = "user2",
                            Description = "Description for post 2",
                            EarliestDelivery = new DateOnly(2024, 10, 1),
                            IsAdoptionReady = false,
                            Title = "Post 2"
                        });
                });

            modelBuilder.Entity("WebApi.Models.QuestionModel", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            QuizId = 1,
                            Text = "Hur ser en perfekt helg ut för dig?"
                        },
                        new
                        {
                            QuestionId = 2,
                            QuizId = 1,
                            Text = "Vilken miljö trivs du bäst i?"
                        },
                        new
                        {
                            QuestionId = 3,
                            QuizId = 1,
                            Text = "Hur mycket tid vill du lägga på ditt husdjur?"
                        },
                        new
                        {
                            QuestionId = 4,
                            QuizId = 1,
                            Text = "Vad är din favorit typ av aktivitet?"
                        },
                        new
                        {
                            QuestionId = 5,
                            QuizId = 1,
                            Text = "Hur hanterar du stress?"
                        },
                        new
                        {
                            QuestionId = 6,
                            QuizId = 1,
                            Text = "Hur ser du på att ta hand om ett husdjur?"
                        },
                        new
                        {
                            QuestionId = 7,
                            QuizId = 1,
                            Text = "Hur viktigt är det för dig att ditt hem är organiserat?"
                        },
                        new
                        {
                            QuestionId = 8,
                            QuizId = 1,
                            Text = "Hur social är du?"
                        },
                        new
                        {
                            QuestionId = 9,
                            QuizId = 1,
                            Text = "Hur ser du på motion?"
                        },
                        new
                        {
                            QuestionId = 10,
                            QuizId = 1,
                            Text = "Hur viktig är rutinen i ditt liv?"
                        },
                        new
                        {
                            QuestionId = 11,
                            QuizId = 1,
                            Text = "Vilken typ av sällskap föredrar du?"
                        },
                        new
                        {
                            QuestionId = 12,
                            QuizId = 1,
                            Text = "Vad är din inställning till städning?"
                        },
                        new
                        {
                            QuestionId = 13,
                            QuizId = 1,
                            Text = "Hur reagerar du på ljud och aktiviteter i ditt hem?"
                        },
                        new
                        {
                            QuestionId = 14,
                            QuizId = 1,
                            Text = "Vad är din syn på husdjursansvar?"
                        },
                        new
                        {
                            QuestionId = 15,
                            QuizId = 1,
                            Text = "Vad tycker du om att ha besök hemma?"
                        });
                });

            modelBuilder.Entity("WebApi.Models.QuizModel", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuizId");

                    b.ToTable("Quiz");

                    b.HasData(
                        new
                        {
                            QuizId = 1,
                            Title = "Vilket djur passar dig bäst?"
                        });
                });

            modelBuilder.Entity("WebApi.Models.ReviewModel", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewedSellerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReviewerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReviewId");

                    b.HasIndex("ReviewedSellerId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Content = "Great post!",
                            Rating = 5,
                            ReviewedSellerId = "user2",
                            ReviewerId = "user1"
                        },
                        new
                        {
                            ReviewId = 2,
                            Content = "Very helpful.",
                            Rating = 4,
                            ReviewedSellerId = "user1",
                            ReviewerId = "user2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApi.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Models.FileModel", b =>
                {
                    b.HasOne("WebApi.Data.ApplicationUser", null)
                        .WithMany("MyFiles")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("WebApi.Models.InterestModel", b =>
                {
                    b.HasOne("WebApi.Data.ApplicationUser", "User")
                        .WithMany("Interests")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApi.Models.PostModel", "PostModel")
                        .WithMany("Interests")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PostModel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Models.OptionModel", b =>
                {
                    b.HasOne("WebApi.Models.QuestionModel", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("WebApi.Models.PostModel", b =>
                {
                    b.HasOne("WebApi.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("Posts")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("WebApi.Models.QuestionModel", b =>
                {
                    b.HasOne("WebApi.Models.QuizModel", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("WebApi.Models.ReviewModel", b =>
                {
                    b.HasOne("WebApi.Data.ApplicationUser", "ReviewedSeller")
                        .WithMany("ReviewsRecieved")
                        .HasForeignKey("ReviewedSellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApi.Data.ApplicationUser", "Reviewer")
                        .WithMany("ReviewsWritten")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReviewedSeller");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("WebApi.Data.ApplicationUser", b =>
                {
                    b.Navigation("Interests");

                    b.Navigation("MyFiles");

                    b.Navigation("Posts");

                    b.Navigation("ReviewsRecieved");

                    b.Navigation("ReviewsWritten");
                });

            modelBuilder.Entity("WebApi.Models.PostModel", b =>
                {
                    b.Navigation("Interests");
                });

            modelBuilder.Entity("WebApi.Models.QuestionModel", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("WebApi.Models.QuizModel", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
